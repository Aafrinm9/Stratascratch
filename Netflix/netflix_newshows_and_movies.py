# -*- coding: utf-8 -*-
"""Netflix_newshows and movies.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zyiZZ2YZKReipx300m3jINJZ_WcgEnKR

New Shows and Movies

**Assignment**

Analyze the data and generate insights that could help Netflix in deciding which type of shows/movies to produce and how they can grow the business in different countries.

You can start by exploring a few questions:

1. What type of content is available in different countries?
2. How has the number of movies released per year changed over the last 20-30 years?
3. Comparison of tv shows vs. movies.
4. What is the best time to launch a TV show?
5. Analysis of actors/directors of different types of shows/movies.
6. Does Netflix has more focus on TV Shows than movies in recent years?
7. Understanding what content is available in different countries.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('netflix_data.csv')

df.head()

"""The dataset provided to you in netflix_data.csv consists of a list of all the TV shows/movies available on Netflix.

1. show_id - a unique ID for every movie/show
2. type - identifier: a movie or TV show
3. title - the title of the movie/show
4. director - the name of the director of the movie/show
5. cast - actors involved in the movie/show
6. country - a country where the movie/show was produced
7. date_added - date it was added on Netflix
8. release_year - the actual release year of the movie/show
9. rating - TV rating of the movie/show
10. duration - total duration in minutes or number of seasons
11. listed_in - genre
12. description - the summary description

"""

df.shape

df.isnull().sum()

df.info()

df.duplicated().sum()

#dtypes within a column
mixed_types = df.apply(lambda x: x.apply(type).nunique())
print(mixed_types)
for col in df.columns:
    print(f"{col}: {df[col].apply(type).unique()}")

"""**Data cleaning and imputation**

Reference : https://medium.com/@capwellmurimi/a-data-wranglers-guide-to-netflix-transforming-raw-data-into-analytical-gold-a9696e471737
"""

#Parsing different date formats
df['date_added'] = pd.to_datetime(df['date_added'],format = 'mixed')

#stripping the alphabet s from id, and keeping it int dtype
df['show_id'] = df['show_id'].str.strip('s').astype('int64')

df.rating.value_counts()

result = df[df['rating'].isin(['74 min', '84 min', '66 min'])]
result
pd.set_option('display.max_rows', None)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.width', None)
pd.set_option('display.max_columns', None)
print(result[['rating','description']])

#Replaced null values in duration column with actual duration present in rating column
df.loc[df['rating'] == '74 min', 'duration'] = '74 min'
df.loc[df['rating'] == '84 min', 'duration'] = '84 min'
df.loc[df['rating'] == '66 min', 'duration'] = '66 min'

#Imputed ratings based on the description of the movie
df.loc[df['rating'] == '74 min', 'rating'] = 'NC-17'
df.loc[df['rating'] == '84 min', 'rating'] = 'NC-17'
df.loc[df['rating'] == '66 min', 'rating'] = 'NC-17'

#Imputing the null value in rating based on description
df.loc[df['show_id'] == 7313, 'rating'] = 'TV-Y'

#Imputing the null value in rating based on description
df.loc[df['show_id'] == 5990, 'rating'] = 'TV-PG'

anime_missing = df[(df['listed_in'].str.contains('Anime Series',na=False))& (df['country'].isnull())]
anime_missing[['show_id','title','country','rating','listed_in','description']]

df[df['listed_in'].str.contains('Anime Series',na=False)]

#Imputed null values of 'Anime series' country to 'Japan'
df.loc[(df['listed_in'].str.contains('Anime Series',na=False))& (df['country'].isnull()),'country'] = 'Japan'

df.loc[df['show_id'] == 6828, 'rating'] = 'TV-MA'

df.loc[df['show_id'] == 7538, 'rating'] = 'TV-PG'

df.isnull().sum()

string_cols = ['type','title','director','cast','country','rating','listed_in','description']
df[string_cols] = df[string_cols].astype('string')

#Distribution of missing data
columns = 'director','cast','country'
total_records = len(df)

for column in columns:
    missing_data = df[['director','cast','country']].isnull().sum()
    missing_percentage = (missing_data / total_records) * 100
    print(f"Column: {column}")
    print(f"Total records: {total_records:,}")
    print(f"Missing values: {missing_data[column]:,} ({missing_percentage[column]:.2f}%)")
    print("-" * 40)

"""Create pairs -> Count how often each pair occurs -> Keeping only frequent collaborations -> Extract those pair names -> Intialize dictionary -> Split each pair and store those names in the dictionary -> Using those dictionary to fill those missing data"""

#Create pairs
df['dir_cast'] = df['director'] + '--' + df['cast']

#Counting how often each pair occurs
counts = df['dir_cast'].value_counts()

#Keeping the frequent collaboration of 3 times
filtered_counts = counts[counts > 3]
filtered_values = filtered_counts.index

#Intialize dictionary
dict_direcast = {}

#Storing those names in the dictionary
for pair in filtered_values:
    director, cast = pair.split('--')
    dict_direcast[director] = cast

for i in range(len(dict_direcast)):
  df.loc[(df['director'].isna()) &
         (df['cast'] == list(dict_direcast.items())[i][1]),
         'director'] = list(dict_direcast.items())[i][0]

df.loc[df['director'].isna(),'director'] = 'Not Given'

directors = df['director']
countries = df['country']
clean_data = df.dropna(subset=['country'])

zipped_dir_country = zip(clean_data['director'], clean_data['country'])

#Intialize dictionary
zipped_to_dict = dict(list(zipped_dir_country))

for i in range(len(zipped_to_dict)):
  df.loc[(df['country'].isna()) &
         (df['director'] == list(zipped_to_dict.items())[i][1]),
         'country'] = list(zipped_to_dict.items())[i][0]

df['country'] = df['country'].fillna('Not Given')

df['cast'] = df['cast'].fillna('Not Given')

df.drop(df[df['date_added'].isna()].index, axis = 0, inplace=True)
df.drop('dir_cast',axis = 1, inplace=True)

df.head()

top_10_countries = df['country'].value_counts().head(10)
plt.figure(figsize=(10, 6))
sns.barplot(x=top_10_countries.index, y=top_10_countries.values, palette='viridis')
plt.title('Top 10 Countries with the Most Content')
plt.xlabel('Country')
plt.ylabel('Number of Content')
plt.xticks(rotation=45)
plt.show()

df_clean = df.assign(country=df.country.str.split(',')).explode('country')
df_clean['country'] = df_clean['country'].str.strip()
country_genres = df_clean.groupby('country')['listed_in'].apply(
    lambda x: ', '.join(x.unique())
    ).reset_index()
country_genres.columns = ['country', 'unique_genres']
print('Unique genres per country:')
for idx,row in country_genres.iterrows():
    print(f"{row['country']}: {row['unique_genres']}")

movie_counts = df[df['type'] == 'Movie']['release_year'].value_counts().sort_index()
movie_counts_1995 = movie_counts[movie_counts.index >= 1995]
plt.figure(figsize=(10, 6))
sns.lineplot(x=movie_counts_1995.index, y=movie_counts_1995.values, marker='o')
plt.title('Number of Movies Released Over the Years')
plt.xlabel('Year')
plt.ylabel('Number of Movies')
plt.xticks(rotation=45)
plt.show()

movies = df[df['type'] == 'Movie'].value_counts()
tv_shows = df[df['type'] == 'TV Show'].value_counts()
plt.figure(figsize=(8, 6))
labels = ['Movies', 'TV Shows']
plt.pie([len(movies), len(tv_shows)], labels=labels, autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Movies vs. TV Shows')
plt.show()

df['month_added'] = df['date_added'].dt.month
tv_shows = df[df['type'] == 'TV Show']
month_names = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
tv_shows['month_added'] = tv_shows['month_added'].apply(lambda x: month_names[x-1])
tv_shows_by_month = tv_shows['month_added'].value_counts().reindex(month_names, fill_value=0)

plt.figure(figsize=(10, 6))
sns.barplot(x=tv_shows_by_month.index, y=tv_shows_by_month.values, palette='viridis')
plt.title('Number of TV Shows Added Over the Months')
plt.xlabel('Month')
plt.ylabel('Number of TV Shows')
plt.show()

from collections import Counter
from itertools import chain
df['cast'] = df['cast'].fillna('')
all_actors = df['cast'].str.split(', ').explode()
actor_counts = all_actors[(all_actors != '') & (all_actors != 'Not Given')].value_counts().head(10)

plt.figure(figsize=(10, 6))
actor_counts.plot(kind='bar')
plt.title('Top 10 Actors with the Most Appearances')
plt.xlabel('Actor')
plt.ylabel('Number of Appearances')
plt.xticks(rotation=45)
plt.show()

content_by_year = df.groupby(['release_year','type']).size().unstack().fillna(0)
recent_content = content_by_year[content_by_year.index >= 2010]

plt.figure(figsize=(10, 6))
recent_content.plot(kind='line', marker='o')
plt.title('Content Types Released Over the Years (after 2010)')
plt.xlabel('Year')
plt.ylabel('Number of Content')
plt.grid(axis='y',alpha=0.6)
plt.show()

df = df[df['country'].notna() & (df['country'].str.strip() != '')]
df = df[~df['country'].str.lower().isin(['unknown'])]

df['country'] = df['country'].str.strip()
df['type'] = df['type'].str.strip().str.title()

country_type_counts = df.groupby(['country','type']).size().unstack().fillna(0)

filtered = country_type_counts[(country_type_counts['Movie'] > 0) & (country_type_counts['Tv Show'] > 0)]
top_5 = filtered.sort_values(by='Movie', ascending=False).head(5)

labels = top_5.index
movies = top_5['Movie'].tolist()
tv_shows = top_5['Tv Show'].tolist()

x = np.arange(len(labels))
width = 0.35

fig, ax = plt.subplots(figsize=(10, 6))
bars1 = ax.bar(x - width/2, movies, width, label='Movie', color='skyblue')
bars2 = ax.bar(x + width/2, tv_shows, width, label='TV Show', color='orange')

ax.set_xlabel('Country')
ax.set_ylabel('Number of Titles')
ax.set_title('Content Availability by Country (Top 5) â€“ Grouped Bar Chart')
ax.set_xticks(x)
ax.set_xticklabels(labels, rotation=45)
ax.legend()
ax.bar_label(bars1, padding=3)
ax.bar_label(bars2, padding=3)
plt.tight_layout()
plt.show()